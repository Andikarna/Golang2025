basePath: /
definitions:
  dto.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    type: object
  dto.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user: {}
    type: object
  dto.LogoutResponse:
    properties:
      message:
        example: Berhasil melakukan logout
        type: string
      status:
        example: success
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      confirmPassword:
        example: password123
        type: string
      email:
        example: example@email.com
        type: string
      firstName:
        example: Jhon
        type: string
      lastName:
        example: Doe
        type: string
      password:
        example: password123
        type: string
    type: object
  dto.Response:
    properties:
      message:
        example: Sucess
        type: string
      status:
        example: "200"
        type: string
    type: object
  model.Attendance:
    properties:
      checkIn:
        type: string
      checkOut:
        type: string
      createdById:
        type: integer
      createdDate:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: integer
      status:
        type: string
      type:
        type: string
      updateById:
        type: integer
      updateDate:
        type: string
      userId:
        type: string
    type: object
  model.User:
    properties:
      createdDate:
        type: string
      email:
        type: string
      id:
        type: integer
      isActive:
        type: boolean
      password:
        type: string
      updateDate:
        type: string
      username:
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: youremail@example.com
    name: Andi Karna
    url: http://localhost:8081
  description: API documentation with JWT Auth
  title: Fundamental API
  version: "1.0"
paths:
  /api/attendance:
    get:
      consumes:
      - application/json
      description: Get history attendance list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Attendance'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get attendance
      tags:
      - Attendance
  /api/login:
    post:
      consumes:
      - application/json
      description: Authentication for user
      parameters:
      - description: Login credentials
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/dto.LoginResponse'
      tags:
      - Users
  /api/logout:
    post:
      consumes:
      - application/json
      description: Logout for user
      produces:
      - application/json
      responses:
        "200":
          description: 200, Logout Berhasil
          schema:
            $ref: '#/definitions/dto.LogoutResponse'
      tags:
      - Users
  /api/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: Body Request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
      tags:
      - Users
  /users:
    get:
      consumes:
      - application/json
      description: Get details of all available user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      summary: Get all Users
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
